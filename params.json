{
  "name": "MIConvexHull",
  "tagline": "A .Net fast convex hull library for 2, 3, and higher dimensions",
  "body": "!! Update Dec 2014\r\n\r\n* Improved handling of \"degenerate\" data (regular grids, etc.). See examples 4DelaunayAndVoronoiWPF and 7DelaunayWPF for basic usage of the new features. It is still not perfect but seems to  be a step forward.\r\n* Performance is improved by up to ~40% mostly due to changing internal representation of data (for example Delaunay tri. of 50k random 3D points down from ~3.2s to ~1.9s on my machine). \r\n\r\n!! Project Description\r\n\r\nThis project is a convex hull algorithm and library for 2D,  3D, and higher dimensions. The code can also be used to compute Delaunay triangulations and Voronoi meshes of the input data. \r\n\r\nThe code is written in C# and provides a template based API that allows extensive customization of the underlying types that represent vertices and faces of the convex hull. The algorithm itself is technically an implementation of the QuickHull algorithm. Nevertheless, it's not just a simple port of QHull as a different approach and data structures are used by the MIConvexHull algorithm.\r\n\r\n!! Examples\r\n\r\nThe timings are illustrative and were obtained on Core i7-5930 using the version from Dec 20 2014 and the Helix Studio example.\r\n\r\n| 26328 vertices: Convex hull in 0.009s. Triangulation in 0.743s. | 34835 vertices: Convex hull in 0.018s. Triangulation in 1.225s. |\r\n| [image:ferrari_thumb.png] [image:ferrariwrap_thumb.png] | [image:bunny_thumb.png] [image:bunnywarp_thumb.png] |\r\n|26332 vertices: Convex hull in 0.003s. Triangulation in 0.761s.|500 2D vertices - Delaunay Triangulation and Voronoi Mesh.|\r\n|[image:eiffel_thumb.png] [image:eiffel-wrap_thumb.png] |[image:2dDelau.png] [image:2dVoronoi.png]|\r\n| Voronoi mesh of regular grid with an ellipse inside. | Delaunay triangulation of regular grid |\r\n| [image:miregularvoronoi.png] | [image:miregulartri.jpg] |",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}